// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Role {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  users       User[]
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@map("roles")
}

model User {
  id         String    @id @default(uuid())
  full_name  String
  email      String    @unique
  password   String
  role_id    String
  role       Role      @relation(fields: [role_id], references: [id])
  sessions   Session[]
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt

  @@index([role_id])
  @@map("users")
}

model Session {
  id         String   @id @default(uuid())
  user_id    String
  user       User     @relation(fields: [user_id], references: [id])
  expires_at DateTime
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([user_id])
  @@map("sessions")
}

model Floor {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String   @db.Text
  number      Int
  status      String   @default("inactif")
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  rooms       Room[]

  @@map("floors")
}

model Room_Type {
  id              Int      @id @default(autoincrement())
  name            String   @unique
  number_adult    Int
  number_children Int
  price           Float
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  rooms           Room[]

  @@map("room_types")
}

model Coupon {
  id          Int       @id @default(autoincrement())
  title       String    @db.VarChar(50)
  description String    @db.Text
  discount    Int
  code        String    @db.VarChar(10)
  used        Boolean   @default(false)
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  bookings    Booking[]

  @@map("coupons")
}

model Room {
  id           Int           @id @default(autoincrement())
  number       String        @db.VarChar(5)
  status       String        @db.VarChar(10)
  floor_id     Int
  type_id      Int
  created_at   DateTime      @default(now())
  updated_at   DateTime      @updatedAt
  floor        Floor         @relation(fields: [floor_id], references: [id])
  type         Room_Type     @relation(fields: [type_id], references: [id])
  bookings     Booking[]
  reservations Reservation[]

  @@index([floor_id])
  @@index([type_id])
  @@map("rooms")
}

model Guest {
  id            Int           @id @default(autoincrement())
  first_name    String        @map("firstName") @db.VarChar(50)
  last_name     String        @map("lastName") @db.VarChar(50)
  email         String        @unique @db.VarChar(100)
  phone         String        @db.VarChar(20)
  address       String?       @db.VarChar(200)
  city          String?       @db.VarChar(100)
  country       String?       @db.VarChar(100)
  postal_code   String?       @map("postalCode") @db.VarChar(20)
  created_at    DateTime      @default(now())
  updated_at    DateTime      @updatedAt
  bookings      Booking[]
  reservations  Reservation[]

  @@map("guests")
}

model Booking {
  id             Int       @id @default(autoincrement())
  reference      String?   @unique @db.VarChar(10)
  check_in       DateTime  @map("checkIn")
  check_out      DateTime  @map("checkOut")
  total_price    Int       @map("totalPrice")
  payment        String    @db.VarChar(15)
  adults         Int
  children       Int
  status         String    @db.VarChar(15)
  room_id        Int
  coupon_id      Int?
  guest_id       Int
  recorded_by_id Int
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt
  room           Room      @relation(fields: [room_id], references: [id])
  coupon         Coupon?   @relation(fields: [coupon_id], references: [id])
  guest          Guest     @relation(fields: [guest_id], references: [id])
  factures       Facture[]

  @@index([room_id])
  @@index([coupon_id])
  @@index([guest_id])
  @@index([recorded_by_id])
  @@map("bookings")
}

model Reservation {
  id             Int      @id @default(autoincrement())
  reference      String?  @unique @db.VarChar(10)
  check_in       DateTime @map("checkIn")
  check_out      DateTime @map("checkOut")
  status         String   @db.VarChar(15)
  room_id        Int
  guest_id       Int
  recorded_by_id Int
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
  room           Room     @relation(fields: [room_id], references: [id])
  guest          Guest     @relation(fields: [guest_id], references: [id])

  @@index([room_id])
  @@index([guest_id])
  @@index([recorded_by_id])
  @@map("reservations")
}

model Facture {
  id          Int      @id @default(autoincrement())
  amount      Int
  status      String   @db.VarChar(15)
  booking_id  Int
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  booking     Booking  @relation(fields: [booking_id], references: [id])

  @@index([booking_id])
  @@map("factures")
}

model Depense {
  id           Int      @id @default(autoincrement())
  title        String   @db.VarChar(50)
  description  String   @db.Text
  amount       Int
  date         DateTime @db.Date
  spent_by_id  Int
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  @@index([spent_by_id])
  @@map("depenses")
}
